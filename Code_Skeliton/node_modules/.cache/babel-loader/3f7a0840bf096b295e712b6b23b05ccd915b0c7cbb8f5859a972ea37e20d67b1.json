{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst baseURL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      inpLoginAccnt: \"\",\n      inpPassword: \"\",\n      showPassword: false\n    };\n  },\n  methods: {\n    handleLogin() {\n      this.processLogin();\n    },\n    async processLogin() {\n      const loginUrl = `${baseURL}/login`;\n      let loginAccValue = `${this.inpLoginAccnt}`;\n      let paswdValue = `${this.inpPassword}`;\n      try {\n        const loginUrlRes = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"loginAccount\": loginAccValue,\n            \"password\": paswdValue\n          })\n        });\n        if (!loginUrlRes.ok) {\n          throw new Error(`HTTP error status: ${loginUrlRes.status}`);\n        }\n        const dataFromRes = await loginUrlRes.json();\n        if (dataFromRes != null) {\n          this.$router.push({\n            name: 'TransportCompanyTranslationTable',\n            params: {\n              accToken: dataFromRes.accessToken\n            }\n          });\n        } else {\n          alert(\"Invalid Credentials\");\n        }\n      } catch (error) {\n        alert(\"Invalid Credentials\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["baseURL","process","env","VUE_APP_BASE_URL","data","inpLoginAccnt","inpPassword","showPassword","methods","handleLogin","processLogin","loginUrl","loginAccValue","paswdValue","loginUrlRes","fetch","method","headers","body","JSON","stringify","ok","Error","status","dataFromRes","json","$router","push","name","params","accToken","accessToken","alert","error"],"sources":["D:\\VSWorkspace\\SAP_API_UI\\src\\components\\LoginScreen.vue"],"sourcesContent":["<template>\n  <div class = \"container\">\n    <div class = \"card\">\n      <h1>SPA</h1>\n      <form @submit.prevent=\"handleLogin\">\n        <div class=\"input-group\">\n          <label>Login Account</label>\n          <input type=\"text\" v-model=\"inpLoginAccnt\" id=\"inpLoginAccnt\" required />\n        </div>\n\n        <div class=\"input-group\">\n          <label>Password</label>\n          <div class=\"password-container\">\n            <input :type=\"showPassword ? 'text' : 'password'\" v-model=\"inpPassword\" id = \"inpPassword\" required />\n          </div>\n        </div>\n\n        <button type=\"submit\" id =\"btnSubmit\">LOGIN</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nconst baseURL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      inpLoginAccnt: \"\",\n      inpPassword: \"\",\n      showPassword: false\n    };\n  },\n\n  methods: {\n    handleLogin() {\n      this.processLogin()\n    },\n    async processLogin() {\n      const loginUrl = `${baseURL}/login`;\n\n      let loginAccValue = `${this.inpLoginAccnt}`\n      let paswdValue = `${this.inpPassword}`\n\n      try {\n          const loginUrlRes = await fetch(loginUrl, \n                                        {\n                                          method: 'POST',\n                                          headers: {'Content-Type': 'application/json'},\n                                          body: JSON.stringify({\n                                                  \"loginAccount\": loginAccValue,\n                                                  \"password\": paswdValue}),\n                                        });\n          if (!loginUrlRes.ok) {\n            throw new Error(`HTTP error status: ${loginUrlRes.status}`);\n          }\n\n          const dataFromRes = await loginUrlRes.json();\n          if (dataFromRes != null) {\n            this.$router.push({ name: 'TransportCompanyTranslationTable', \n                                params: { accToken : dataFromRes.accessToken } });          \n          } else {\n            alert(\"Invalid Credentials\");\n          }\n        } catch (error) {\n          alert(\"Invalid Credentials\");\n        }\n      }\n  }\n};\n</script>\n"],"mappings":";AAwBA,MAAMA,OAAM,GAAIC,OAAO,CAACC,GAAG,CAACC,gBAAgB;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACC,YAAY,CAAC;IACpB,CAAC;IACD,MAAMA,YAAYA,CAAA,EAAG;MACnB,MAAMC,QAAO,GAAI,GAAGX,OAAO,QAAQ;MAEnC,IAAIY,aAAY,GAAI,GAAG,IAAI,CAACP,aAAa,EAAC;MAC1C,IAAIQ,UAAS,GAAI,GAAG,IAAI,CAACP,WAAW,EAAC;MAErC,IAAI;QACA,MAAMQ,WAAU,GAAI,MAAMC,KAAK,CAACJ,QAAQ,EACV;UACEK,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAC,cAAc,EAAE;UAAkB,CAAC;UAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACb,cAAc,EAAER,aAAa;YAC7B,UAAU,EAAEC;UAAU,CAAC;QACjC,CAAC,CAAC;QAChC,IAAI,CAACC,WAAW,CAACO,EAAE,EAAE;UACnB,MAAM,IAAIC,KAAK,CAAC,sBAAsBR,WAAW,CAACS,MAAM,EAAE,CAAC;QAC7D;QAEA,MAAMC,WAAU,GAAI,MAAMV,WAAW,CAACW,IAAI,CAAC,CAAC;QAC5C,IAAID,WAAU,IAAK,IAAI,EAAE;UACvB,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;YAAEC,IAAI,EAAE,kCAAkC;YACxCC,MAAM,EAAE;cAAEC,QAAO,EAAIN,WAAW,CAACO;YAAY;UAAE,CAAC,CAAC;QACvE,OAAO;UACLC,KAAK,CAAC,qBAAqB,CAAC;QAC9B;MACF,EAAE,OAAOC,KAAK,EAAE;QACdD,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}