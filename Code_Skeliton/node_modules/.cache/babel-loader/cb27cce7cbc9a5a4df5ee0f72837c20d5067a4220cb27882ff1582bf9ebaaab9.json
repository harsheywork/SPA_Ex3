{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst baseURL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      inpLoginAccnt: \"\",\n      inpPassword: \"\",\n      showPassword: false\n    };\n  },\n  mounted() {\n    sessionStorage.removeItem(\"accessTokenInSessn\");\n  },\n  methods: {\n    handleLogin() {\n      this.processLogin();\n    },\n    /*Performs authentication using login url, if login is success redirected to the transport translation screen\r\n    If login failed error message will be displayed\r\n    */\n    async processLogin() {\n      /*Login url to match with API*/\n      const loginUrl = `${baseURL}/login`;\n\n      /*Collecting credentials given by user*/\n      let loginAccValue = `${this.inpLoginAccnt}`;\n      let paswdValue = `${this.inpPassword}`;\n      try {\n        /*Sending loginrequest to API with user given credentials*/\n        const loginUrlRes = await fetch(loginUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            loginAccount: loginAccValue,\n            password: paswdValue\n          })\n        });\n\n        /*If response of login prcosess is not 200, raising error. \r\n          All errors are handled in catch block only*/\n        if (!loginUrlRes.ok) {\n          throw new Error(`${loginUrlRes.status}`);\n        }\n\n        /*Once login is successful take the accesstoken from the response and \r\n          setting it in session storage. \r\n          Also redirecting to transport translation vue*/\n        const dataFromRes = await loginUrlRes.json();\n        if (dataFromRes != null) {\n          sessionStorage.setItem(\"accessTokenInSessn\", dataFromRes.accessToken);\n          this.$router.push({\n            name: \"TransportCompanyTranslationTable\"\n          });\n        } else {\n          throw new Error(\"404\");\n        }\n      } catch (error) {\n        switch (error.message) {\n          case \"400\":\n            alert(\"Bad request\");\n            break;\n          case \"401\":\n            alert(\"Unauthorised / Incorrect url\");\n            break;\n          case \"404\":\n            alert(\"Invalid credentials\");\n            break;\n          default:\n            alert(\"Error in login process. Unable to connect to the API\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["baseURL","process","env","VUE_APP_BASE_URL","data","inpLoginAccnt","inpPassword","showPassword","mounted","sessionStorage","removeItem","methods","handleLogin","processLogin","loginUrl","loginAccValue","paswdValue","loginUrlRes","fetch","method","headers","body","JSON","stringify","loginAccount","password","ok","Error","status","dataFromRes","json","setItem","accessToken","$router","push","name","error","message","alert"],"sources":["D:\\VSWorkspace\\SPA_API_UI\\src\\components\\LoginScreen.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"card\">\r\n      <h1>SPA</h1>\r\n\r\n      <form @submit.prevent=\"handleLogin\">\r\n        <div class=\"input-group\">\r\n          <label>Login Account</label>\r\n          <input\r\n            type=\"text\"\r\n            v-model=\"inpLoginAccnt\"\r\n            id=\"inpLoginAccnt\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n          <label>Password</label>\r\n          <div class=\"password-container\">\r\n            <input\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              v-model=\"inpPassword\"\r\n              id=\"inpPassword\"\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btnLogin\">LOGIN</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst baseURL = process.env.VUE_APP_BASE_URL;\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      inpLoginAccnt: \"\",\r\n      inpPassword: \"\",\r\n      showPassword: false,\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    sessionStorage.removeItem(\"accessTokenInSessn\");\r\n  },\r\n\r\n  methods: {\r\n    handleLogin() {\r\n      this.processLogin();\r\n    },\r\n\r\n    /*Performs authentication using login url, if login is success redirected to the transport translation screen\r\n    If login failed error message will be displayed\r\n    */\r\n    async processLogin() {\r\n\r\n      /*Login url to match with API*/\r\n      const loginUrl = `${baseURL}/login`;\r\n\r\n      /*Collecting credentials given by user*/\r\n      let loginAccValue = `${this.inpLoginAccnt}`;\r\n      let paswdValue = `${this.inpPassword}`;\r\n\r\n      try {\r\n\r\n        /*Sending loginrequest to API with user given credentials*/\r\n        const loginUrlRes = await fetch(loginUrl, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            loginAccount: loginAccValue,\r\n            password: paswdValue,\r\n          }),\r\n        });\r\n\r\n        /*If response of login prcosess is not 200, raising error. \r\n          All errors are handled in catch block only*/\r\n        if (!loginUrlRes.ok) {\r\n          throw new Error(`${loginUrlRes.status}`);\r\n        }\r\n\r\n        /*Once login is successful take the accesstoken from the response and \r\n          setting it in session storage. \r\n          Also redirecting to transport translation vue*/\r\n        const dataFromRes = await loginUrlRes.json();\r\n        if (dataFromRes != null) {\r\n          sessionStorage.setItem(\"accessTokenInSessn\", dataFromRes.accessToken);\r\n          this.$router.push({ name: \"TransportCompanyTranslationTable\" });\r\n        } else {\r\n          throw new Error(\"404\");\r\n        }\r\n      } catch (error) {\r\n        switch (error.message) {\r\n          case \"400\":\r\n            alert(\"Bad request\");\r\n            break;\r\n          case \"401\":\r\n            alert(\"Unauthorised / Incorrect url\");\r\n            break;\r\n          case \"404\":\r\n            alert(\"Invalid credentials\");\r\n            break;\r\n          default:\r\n            alert(\"Error in login process. Unable to connect to the API\");\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #b2dfdb;\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\n\r\n.card {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  width: 300px;\r\n}\r\n\r\n.card h1 {\r\n  text-align: center;\r\n  color: #1a237e;\r\n  font-size: 34px;\r\n  font-weight: 100;\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n#inpLoginAccnt {\r\n  width: 94%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.password-container {\r\n  position: relative;\r\n}\r\n\r\n#inpPassword {\r\n  width: 86%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  padding-right: 30px;\r\n}\r\n\r\n.btnLogin {\r\n  float: right;\r\n  width: 26%;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":";AAmCA,MAAMA,OAAM,GAAIC,OAAO,CAACC,GAAG,CAACC,gBAAgB;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACRC,cAAc,CAACC,UAAU,CAAC,oBAAoB,CAAC;EACjD,CAAC;EAEDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACC,YAAY,CAAC,CAAC;IACrB,CAAC;IAED;;;IAGA,MAAMA,YAAYA,CAAA,EAAG;MAEnB;MACA,MAAMC,QAAO,GAAI,GAAGd,OAAO,QAAQ;;MAEnC;MACA,IAAIe,aAAY,GAAI,GAAG,IAAI,CAACV,aAAa,EAAE;MAC3C,IAAIW,UAAS,GAAI,GAAG,IAAI,CAACV,WAAW,EAAE;MAEtC,IAAI;QAEF;QACA,MAAMW,WAAU,GAAI,MAAMC,KAAK,CAACJ,QAAQ,EAAE;UACxCK,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,YAAY,EAAET,aAAa;YAC3BU,QAAQ,EAAET;UACZ,CAAC;QACH,CAAC,CAAC;;QAEF;;QAEA,IAAI,CAACC,WAAW,CAACS,EAAE,EAAE;UACnB,MAAM,IAAIC,KAAK,CAAC,GAAGV,WAAW,CAACW,MAAM,EAAE,CAAC;QAC1C;;QAEA;;;QAGA,MAAMC,WAAU,GAAI,MAAMZ,WAAW,CAACa,IAAI,CAAC,CAAC;QAC5C,IAAID,WAAU,IAAK,IAAI,EAAE;UACvBpB,cAAc,CAACsB,OAAO,CAAC,oBAAoB,EAAEF,WAAW,CAACG,WAAW,CAAC;UACrE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;YAAEC,IAAI,EAAE;UAAmC,CAAC,CAAC;QACjE,OAAO;UACL,MAAM,IAAIR,KAAK,CAAC,KAAK,CAAC;QACxB;MACF,EAAE,OAAOS,KAAK,EAAE;QACd,QAAQA,KAAK,CAACC,OAAO;UACnB,KAAK,KAAK;YACRC,KAAK,CAAC,aAAa,CAAC;YACpB;UACF,KAAK,KAAK;YACRA,KAAK,CAAC,8BAA8B,CAAC;YACrC;UACF,KAAK,KAAK;YACRA,KAAK,CAAC,qBAAqB,CAAC;YAC5B;UACF;YACEA,KAAK,CAAC,sDAAsD,CAAC;QACjE;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}