{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst baseURL = process.env.VUE_APP_BASE_URL;\nexport default {\n  data() {\n    return {\n      inpLoginAccnt: \"\",\n      inpPassword: \"\",\n      showPassword: false\n    };\n  },\n  methods: {\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    handleLogin() {\n      this.processLogin();\n    },\n    async processLogin() {\n      let loginAccValue = `${this.inpLoginAccnt}`;\n      let paswdValue = `${this.inpPassword}`;\n      const loginUrl = `${baseURL}/login`;\n      try {\n        const response = await fetch(loginUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"loginAccount\": loginAccValue,\n            \"password\": paswdValue\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data != null) {\n          this.$router.push({\n            name: 'TransportCompanyTranslationTable',\n            params: {\n              accToken: data.accessToken\n            }\n          });\n        } else {\n          alert(\"Invalid Credentials.\");\n        }\n      } catch (error) {\n        alert(\"Invalid Credentials.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["baseURL","process","env","VUE_APP_BASE_URL","data","inpLoginAccnt","inpPassword","showPassword","methods","togglePassword","handleLogin","processLogin","loginAccValue","paswdValue","loginUrl","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","$router","push","name","params","accToken","accessToken","alert","error"],"sources":["D:\\VSWorkspace\\jgs-assist\\src\\components\\LoginScreen.vue"],"sourcesContent":["<template>\n  <div class = \"container\">\n    <div class = \"card\">\n      <h1>SPA</h1>\n      <form @submit.prevent=\"handleLogin\">\n        <div class=\"input-group\">\n          <label>Login Account</label>\n          <input type=\"text\" v-model=\"inpLoginAccnt\" id=\"inpLoginAccnt\" required />\n        </div>\n        <div class=\"input-group\">\n          <label>Password</label>\n          <div class=\"password-container\">\n            <input :type=\"showPassword ? 'text' : 'password'\" v-model=\"inpPassword\" id = \"inpPassword\" required />\n            <button @click=\"togglePasswordVisibility\" class=\"eye-icon\">\n              <span v-if=\"isPasswordVisible\">üëÅÔ∏è</span> <!-- Visible eye -->\n              <span v-else>üôà</span> <!-- Hidden eye -->\n            </button>\n          </div>\n        </div>\n        <button type=\"submit\" id =\"btnSubmit\">LOGIN</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nconst baseURL = process.env.VUE_APP_BASE_URL;\n\nexport default {\n  data() {\n    return {\n      inpLoginAccnt: \"\",\n      inpPassword: \"\",\n      showPassword: false\n    };\n  },\n  methods: {\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    handleLogin() {\n      this.processLogin()\n    },\n    async processLogin() {\n      let loginAccValue = `${this.inpLoginAccnt}`\n      let paswdValue = `${this.inpPassword}`\n\n      const loginUrl = `${baseURL}/login`;\n      try {\n          const response = await fetch(loginUrl, \n                                        {\n                                          method: 'POST',\n                                          headers: {'Content-Type': 'application/json'},\n                                          body: JSON.stringify({\n                                                  \"loginAccount\": loginAccValue,\n                                                  \"password\": paswdValue}),\n                                        });\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const data = await response.json();\n          if (data != null) {\n            this.$router.push({ name: 'TransportCompanyTranslationTable', params: { accToken : data.accessToken } });          \n          } else {\n            alert(\"Invalid Credentials.\");\n          }\n        } catch (error) {\n          alert(\"Invalid Credentials.\");\n        }\n      }\n  }\n};\n</script>\n<style>\n  body, html {\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n  }\n</style>\n"],"mappings":";AA0BA,MAAMA,OAAM,GAAIC,OAAO,CAACC,GAAG,CAACC,gBAAgB;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACF,YAAW,GAAI,CAAC,IAAI,CAACA,YAAY;IACxC,CAAC;IACDG,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACC,YAAY,CAAC;IACpB,CAAC;IACD,MAAMA,YAAYA,CAAA,EAAG;MACnB,IAAIC,aAAY,GAAI,GAAG,IAAI,CAACP,aAAa,EAAC;MAC1C,IAAIQ,UAAS,GAAI,GAAG,IAAI,CAACP,WAAW,EAAC;MAErC,MAAMQ,QAAO,GAAI,GAAGd,OAAO,QAAQ;MACnC,IAAI;QACA,MAAMe,QAAO,GAAI,MAAMC,KAAK,CAACF,QAAQ,EACP;UACEG,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAC,cAAc,EAAE;UAAkB,CAAC;UAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACb,cAAc,EAAET,aAAa;YAC7B,UAAU,EAAEC;UAAU,CAAC;QACjC,CAAC,CAAC;QAChC,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMpB,IAAG,GAAI,MAAMW,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClC,IAAIrB,IAAG,IAAK,IAAI,EAAE;UAChB,IAAI,CAACsB,OAAO,CAACC,IAAI,CAAC;YAAEC,IAAI,EAAE,kCAAkC;YAAEC,MAAM,EAAE;cAAEC,QAAO,EAAI1B,IAAI,CAAC2B;YAAY;UAAE,CAAC,CAAC;QAC1G,OAAO;UACLC,KAAK,CAAC,sBAAsB,CAAC;QAC/B;MACF,EAAE,OAAOC,KAAK,EAAE;QACdD,KAAK,CAAC,sBAAsB,CAAC;MAC/B;IACF;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}